/**
 * @file Function.h
 * @author Spencer Millican (millican@auburn.edu)
 * @version 0.1
 * @date 2019-05-06
 *
 * @copyright Copyright (c) 2019
 *
 */

#include <vector>
#include <unordered_set>

#include "Value.h"
#include "ValueVectorFunctions.hpp" //shift
#include "Function.h" //XOR

#ifndef PRPG_H
#define PRPG_h

 /*
  * A peudo-random pattern generator (PRPG).
  *
  * A PRPG implements a LFSR and calculates returned vectors of values based on
  * this LFSR. By using this object as opposed to pure-random vectors (i.e.,
  * using the built-in ValueVectorFunction::random function), generated stimulus
  * will be 1) more predictable, which will make debugging attempts more
  * consistent, and 2) more representitive of hardware-applied tests.
  *
  * The LFSR implemented here is a 31-bit external LFSR. All vectors generated
  * are presumed to be part of a scan chain fed by the LSB of this LFSR. This
  * implies sequential vectors generated by the PRPG are highly correlated to
  * eachother, as they will be the shifted result of the previous vector with
  * a single bit difference.
  *
  * Unless otherwise specified, the LFSR is loaded with an "all 1s" seed.
  *
  * @param _primitive The underlying data primitive to simulate.
  */
template <class _primitive>
class PRPG {
public:
	/*
	 * Create the PRPG of a given size and given seed.
	 *
	 * @param _size The number of bits in the PRPG (note: the size of the LFSR
	 *              which generates the patterns is always 31 bits).
	 * @param (optional) _seed The seed to load the PRPG with.
	 */
	PRPG(
		size_t _size,
		unsigned int _seed = (_primitive)1
		//std::vector<Value<_primitive>> _seed = std::vector<Value<_primitive>>()
	);

	/*
	 * Fetch a vector from the PRPG (after incrementing it by a single shift).
	 *
	 * @returns The vector generated by the PRPG.
	 */
	std::vector<Value<_primitive>> increment();

	/*
	 * Fetch a vector from the PRPG (after performing a full load).
	 *
	 * @returns The vector generated by the PRPG.
	 */
	std::vector<Value<_primitive>> load();

private:
	/*
	 * The current state of the PRPG.
	 */

	/*
	 * The last-returned vector.
	 */
	std::vector<Value<_primitive>> last_;

	/*
	 * The current state of the LFSR.
	 */
	unsigned long long int lfsr_;

	/*
	 * The LFSR XORed indicies (exponents).
	 *
	 * The "1s" are the indicies.
	 *
	 * The stnadard XOR bits for a 64-bit LFSR are 1, 3, 4 ('0' is part of the wrap-around, but is not "inverted")
	 * Since bits are shifted right, these positions are tranlated to 62, 60, and 59 ("63" is the MSB which "wraps around").
	 * //DELETE: old external LFSR //The standard XORs bits for the 31-bit lfsr are 0 and 3.
	 */
	//DELTE: 31-bit external lfsr //unsigned long int exp_ = 0x00000009;
	unsigned long long int exp_ = 0x5800000000000000;
	
};



#endif //PRPG_h