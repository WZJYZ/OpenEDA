/**
 * @file SAT.h
 * @author Spencer Millican (millican@auburn.edu)
 * @version 0.1
 * @date 2019-01-14
 *
 * @copyright Copyright (c) 2019
 *
 */

#ifndef SAT_h
#define SAT_h

#include <ctime>

#include "Simulator.h"
#include "Combination.hpp"
#include "SATStructures.hpp"

//Forward declaration
template <class T>
class SatisfiableNode;

/*
 * A Simulator restricted to flagged Nodes.
 *
 * Unlike a regular simulator, a RestrictedSimulator will not update Nodes
 * (and their outputs) unless the Node is flagged. Therefore, Nodes in this
 * Simulator must be Tracable.
 *
 * @param _primitive The underlying data primitive to simulate.
 */
template <class _primitive>
class RestrictedSimulator : public Simulator<_primitive> {
public:
	/*
	 * Set restrictions to a given set of Nodes.
	 *
	 * @param _nodes Nodes to active simulation to (i.e., to flag).
	 */
	void setActiveSimulationNodes(std::unordered_set < SatisfiableNode<_primitive>* > _nodes);

	/*
	 * Unrestrict a given set of Nodes. Simultaneously, set all Node output values to "undefined".
	 *
	 * @param _nodes Nodes to unrestrict and to reset (i.e., to unflag).
	 */
	void unssetActiveSimulationNodes(std::unordered_set < SatisfiableNode<_primitive>* > _nodes);

};

/*
 * Performs satisfiability (SAT) on Circuit Line Value combinations.
 *
 * @param _primitive The underlying data primitive to simulate.
 */
template <class _primitive>
class SAT {
public:
	/*
	 * Create and set a per-combination time limit (in seconds).
	 *
	 * @param _limit Time limit (in seconds).
	 */
	SAT(int _limit);

	/*
	 * Perform SAT for a given Combination.
	 *
	 * NOTE: This function does not perform the actual SAT, but instead calls the
	 * internal SAT implementation.
	 *
	 * @param _circuit The circuit to apply inputs to.
	 * @param _combination The Combination to satisfy.
	 * @return The combination of Circuit inputs which satisfy the given combinations.
	 *         If the number of inputs given is "zero", then it cannot be satisfied.
	 */
	Combination<_primitive> satisfy(Circuit* _circuit,
									Combination<_primitive>* _combination);

	/*
	 * Perform SAT for a given set of Combinations with a set of influencing PIs and COI.
	 *
	 * NOTE: This function does not perform the actual SAT, but instead calls the
	 * internal SAT implementation.
	 *
	 * NOTE: "empty" PIs and COI can be given: it will then be generated by the function.
	 *
	 * @param _circuit The circuit to apply inputs to.
	 * @param _combination A set of Combinations to satisfy.
	 * @param _pis (optional) Primary inputs to apply stimulus to. If an empty 
	 *        list is given, a trace will be performed (and can be re-used by 
	 *        calling functions).
	 * @param _coi (optional) The cone of influence. If an empty list is given, a
	 *        trace will be performed (and can be re-used by calling functions).
	 * @return The combinations which were satisfied.
	 */
	std::unordered_set<Combination<_primitive>*> satisfy(Circuit* _circuit,
									std::unordered_set<Combination<_primitive>*> _combinations,
									std::unordered_set<SatisfiableNode<_primitive>*> _pis = std::unordered_set<SatisfiableNode<_primitive>*>(),
									std::unordered_set<SatisfiableNode<_primitive>*> _coi = std::unordered_set<SatisfiableNode<_primitive>*>());

protected:
	/*
	 * Perform sat for a given Combination.
	 *
	 * @param _circuit The circuit to apply inputs to.
	 * @param _combination The Combination to satisfy.
	 * @param _pis Primary inputs to apply stimulus to. If an empty list is given,
	 *        a trace will be performed (and can be re-used by calling functions).
	 * @param _coi The cone of influence. If an empty list is given, a trace will
	 *        be performed (and can be re-used by calling functions).
	 * @return The combination of Circuit inputs which satisfy the given combinations.
	 *         If the number of inputs given is "zero", then it cannot be satisfied.
	 */
	Combination<_primitive> satisfy(Circuit* _circuit,
									Combination<_primitive>* _combination, 
									std::unordered_set<SatisfiableNode<_primitive>*>& _pis,
									std::unordered_set<SatisfiableNode<_primitive>*>& _coi);

	/*
	 * Prepare a given Circuit for SAT (by disabling simulation on all Nodes).
	 *
	 * @param _circuit The Circuit to prepare.
	 */
	void prepare(Circuit* _circuit);

	/*
	 * Release a given Circuit for SAT (by enabling simulation on all Nodes).
	 *
	 * @param _circuit The Circuit to release.
	 */
	void release(Circuit* _circuit);

	/*
	 * With the current clock, is there time left?
	 *
	 * @param The start time of a given process.
	 * @return True if there is time left.
	 */
	bool timeLeft(clock_t _time);

private:
	/*
	 * The Simulator which evalautes Circuit Values./
	 */
	RestrictedSimulator<_primitive> simulator_;

	/*
	 * The per-combination time limit of this object (in clock ticks).
	 */
	clock_t limit_;

};

#endif